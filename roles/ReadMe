Description des services : 
IPTABLES : firewall
#### Rappel iptables, qu'est ce que c'est : ###
Iptables permet de configurer le pare-feu de l’ordinateur. 
Il permet de contrôler les paquets réseau entrant et sortant de l’ordinateur en utilisant un ensemble de règles définies par l’administrateur du système.

Pour vérifier que nos règles iptable fonctionne bien :
Dans un premier temps : 
- installer netcat sur raspberry & machine master :sudo apt install netcat-openbsd
- sur la raspberry lancer netcat en mode "écoute" sur le port 4000 : nc -l 4000 
- sur une autre machine, envoyer "bonjour" sur le port 4000 de la raspberry : echo "bonjour" | nc raspi 4000
=> CONCLUSION : sans les règles iptables, on reçoit sur la raspberry "bonjour" 

Après l'ajout des règles iptables, procéder au même test pour s'assurer que c'est filtrer.

Description des règles ajouter : 
- autoriser les connexions : SSH, HTTP, HTTPS
- autoriser les connexions entrante venant du réseau local 192.168.10.1/24
- autoriser les connexions établies et reliées : c'est à dire, lorsque j'ai une connexion, je l'a maintient en acceptant le flux entrant et sortant
- accepter les requêtes PING en entrée et en sortie (icmp)
- règle de redirection de port DNAT
- refuser le reste : c'est à dire drop en input et en forward
Remarque : la dernière étape consiste à sauvegarder les règles afin qu'elles deviennent persistente (si on reboot / éteint la machine, les règles ne disparraissent pas)

Tester si le service tourne sur la raspberry : service fail2ban status

###Rappel logwatch, qu'est ce que c'est : ###
Logwatch est un outil d'analyse de logs qui génère des rapports sur les activités du système en analysant les fichiers de logs. Il est principalement utilisé pour la surveillance système, la détection d'intrusions les diagnostic et l'envoie de rapport automatisé par mail.
Ici on installe et configure logwatch de manière à ce qu'il nous envoie des mails de rapport puis on lance une tâche automatisé dans le crontab pour que le service chaque jour à 1h10 du matin.

###Rappel Reverse-Proxy, qu'est ce que c'est : ###
Reverse-proxy : 
Un reverse-proxy est un serveur intermédiaire qui se situe entre les clients et les serveurs backend (serveurs web, bases de données, etc.). 
Ici j'ai configuré le reverse-proxy pour gérer la redirection des ports 8081 et 8081 vers ceux de deux contenairs docker respectifs dans lesquelles vont tourner piHole et un serveur web Nginx.

###Rappel RKhunter, qu'est ce que c'est : ###
rkhunter (pour Rootkit Hunter) est un programme qui essaye de détecter les rootkits, portes dérobées et exploits. Comme logwatch, il est possible d'obtenir un rapport automatisé par mail. C'est ce que j'ai fais. 
La tasks installe puis configure RKhunter de manière à envoyer des rapports à l'adresse mail rsocial59@gmail.com grâce aux fichiers de configuration. Les tasks commenté permettent de faire aux déploiement un update et de lancer un check entier, cependant comme celle ci sont relativement longues, j'ai fais le choix de ne les commenté pour le développement.
De plus, lors du checkall, des validations manuelles étaient requises entre certains check, d'où l'option --sk (skip keypress). 

### Rappel SSH, qu'est ce que c'est : ###
SSH est un shell nous permettant de prendre la main sur une machine distante. Il utilise le port 22. 

Création d'une clé SSH sur la machine Master (localhost) dans /tmp
Création sur la machine cible d'un utilisateur (ici nommé test) 
Déploiment sur cet utilisateur de la clé SSH.

Pour tester : 
sur la raspi :
id test - vérifier la bonne création de l'user
sudo ls /home/test/.ssh - vérifier la création de authorized_keys

sur la machine master : 
ssh -i /tmp/lisa test@192.168.10.86 

### Hostname ### 
Le hostname est le nom que la machine va avoir sur le réseau, ici nous lui attribuons "raspi"

avec l'ajout de l'hostname on peut maintenant se connecter sans renseigner l'adresse ip cible : 
ssh -i /tmp/lisa test@raspi

###Rappel Pihole, qu'est ce que c'est : ###
C'est un bloqueur de publicité à l'ensemble des machines de notre réseau et le gérer de manière centralisée. Pi-Hole est un DNS « sinkhole », comprendre « entonnoir ». Il va utiliser les requêtes DNS faites par vos appareils pour valider ou non le trafic et ainsi vous mettre à l’abri des adresses et domaines connus comme diffusant de la pub, des malwares, etc.

Ici nous créons un contenair avec Pihole tournant dedans puis nous ajoutons l'adresse IP du contenair au fichier resolv.conf de la raspberry afin qu'elle utilise ce DNS plutôt que celui par défaut. 
Afin de faire un test simple : 
- aller sur https://canyoublockit.com/testing/ avant installation de piHole puis après et s'assurer qu'il n'y a plus de pub. 

###Rappel Docker, qu'est ce que c'est : ### 
Docker est une plateforme de conteunerisation. Un contenair est un environnement d’exécution léger, et d’une alternative aux méthodes de virtualisation traditionnelles basées sur les machines virtuelles.
Afin de créer un point d'entrée sécurisé sur notre réseau, j'ai décidé de faire tourné différent service dans des contenair docker, la tasks permet de : 
- installer docker
- s'assurer qu'il est bien installé
- lancer docker 

### Rappel fail2ban,  qu'est ce que c'est : ###
Fail2ban est un outil de sécurité qui aide à protéger les systèmes Unix/Linux contre les attaques par force brute et d'autres types d'intrusions. 
Il fonctionne en surveillant les fichiers de logs pour des tentatives de connexion suspectes et en appliquant des règles de pare-feu pour bloquer les adresses IP malveillantes.

Description des actions réalisés par ansible : 
- Installer Fail2ban et met à jour le cache APT
- Démarrer le service Fail2ban et l'activer pour qu'il démarre automatiquement au démarrage du système.
- Crée ou mettre à jour le fichier de configuration jail.local pour Fail2ban avec les règles pour SSH, Apache (et plus tard Nginx)
- [sshd] : Configure Fail2ban pour surveiller les logs SSH.
- [nginx-http-auth] : Configure Fail2ban pour surveiller les logs d'authentification Nginx

Tester le bon fonctionnement : service fail2ban status

